name: Build, Push and Deploy ThingsBoard Images

on:
  push:
    branches:
      #- develop
      - main 
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versioning.outputs.version }}
      image_identified: ${{ steps.identify-image.outputs.image_found }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Free up system disk space
        run: |
          sudo apt-get clean
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1
            network=host

      - name: Clean Docker space
        run: |
          docker system df
          docker system prune -af --volumes
          docker buildx prune -af

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2            

      - name: Semantic versioning
        id: versioning
        uses: paulhatch/semantic-version@v5.0.2
        with:
          tag_prefix: "v"
          major_pattern: "(BREAKING CHANGE|major):"
          minor_pattern: "(feat|minor):"
          patch_pattern: "(fix|patch|chore):"
          version_format: "${major}.${minor}.${patch}"
          bump_each_commit: true

      - name: Verify version
        run: |
          if [ -z "${{ steps.versioning.outputs.version }}" ]; then
            echo "Version generation failed!"
            exit 1
          fi
          echo "Using version: ${{ steps.versioning.outputs.version }}"

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -DskipTests=true -Dlicense.skip=true -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=Cyberkabil10_sobeam-app-supcom
      - name: Create optimized .dockerignore
        run: |
          cat > .dockerignore << EOF
          target/
          .git/
          logs/
          *.log
          .DS_Store
          README.md
          .github/
          .mvn/
          mvnw*
          pom.xml
          src/
          **/node_modules/
          **/test/
          **/.gitignore
          EOF
          echo "=== .dockerignore contents ==="
          cat .dockerignore

      - name: Build project with Maven and Docker (optimized)
        run: |
          # Clean any existing images to free space
          docker system prune -f
          
          # Build with optimized Maven settings
          mvn clean install -DskipTests -Dlicense.skip=true -Ddockerfile.skip=false \
            -Dmaven.javadoc.skip=true -Dmaven.source.skip=true -Dcheckstyle.skip=true

      - name: Clean intermediate images
        run: |
          # Remove intermediate images after build
          docker image prune -f
          echo "=== Remaining images ==="
          docker image ls --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"

      - name: Push tb-postgres image to ECR
        run: |
          VERSION=${{ steps.versioning.outputs.version }}
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGION="eu-west-3"
          REPO_NAME="sobeam-dev"
          IMAGE_URI="$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPO_NAME"

          # Create repository if it doesn't exist
          aws ecr describe-repositories --repository-names $REPO_NAME --region $REGION || \
          aws ecr create-repository --repository-name $REPO_NAME --region $REGION

          # Find the tb-postgres image more reliably
          TB_IMAGE=$(docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.CreatedAt}}" | \
            grep "tb-postgres" | sort -k3 -r | head -1 | awk '{print $1 ":" $2}')

          if [ -z "$TB_IMAGE" ]; then
            echo "ERROR: tb-postgres image not found!"
            echo "Available images:"
            docker images
            exit 1
          fi

          echo "Found image: $TB_IMAGE"
          echo "Pushing to: $IMAGE_URI:$VERSION"

          # Tag and push version
          docker tag $TB_IMAGE $IMAGE_URI:$VERSION
          docker push $IMAGE_URI:$VERSION

          # Tag and push latest
          docker tag $TB_IMAGE $IMAGE_URI:latest
          docker push $IMAGE_URI:latest

          echo "ECR_IMAGE=$IMAGE_URI:$VERSION" >> $GITHUB_ENV

      - name: Final cleanup
        run: |
          docker system prune -af
          df -h
