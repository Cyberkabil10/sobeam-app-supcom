name: Build, Push and Deploy ThingsBoard Images

on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versioning.outputs.version }}
      image_identified: ${{ steps.identify-image.outputs.image_found }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3          

      - name: Clean Docker space
        run: |
          docker system df
          docker system prune -af --volumes

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Semantic versioning
        id: versioning
        uses: paulhatch/semantic-version@v5.0.2
        with:
          tag_prefix: "v"
          major_pattern: "(BREAKING CHANGE|major):"
          minor_pattern: "(feat|minor):"
          patch_pattern: "(fix|patch|chore):"
          version_format: "${major}.${minor}.${patch}"
          bump_each_commit: true

      - name: Verify version
        run: |
          if [ -z "${{ steps.versioning.outputs.version }}" ]; then
            echo "Version generation failed!"
            exit 1
          fi
          echo "Using version: ${{ steps.versioning.outputs.version }}"
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
     # - name: Cache Maven packages
     #   uses: actions/cache@v4
     #   with:
     #     path: ~/.m2
     #     key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
     #     restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -Dlicense.skip=true -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=Cyberkabil10_sobeam-app-supcom


      - name: Build project with Maven and Docker
        run: |
          echo "target/" >> .dockerignore
          echo ".git/" >> .dockerignore
          echo "logs/" >> .dockerignore
          
          DOCKER_HOST=unix:///var/run/docker.sock \
          mvn clean install -DskipTests -Dlicense.skip=true -Ddockerfile.skip=false
      - name: List built images
        run: docker image ls --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
        
      - name: Push tb-postgres image to ECR
        run: |
          VERSION=${{ steps.versioning.outputs.version }}
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGION="eu-west-3"
          REPO_NAME="sobeam-dev"
          IMAGE_URI="$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPO_NAME"

          aws ecr describe-repositories --repository-names $REPO_NAME --region $REGION || \
          aws ecr create-repository --repository-name $REPO_NAME --region $REGION

          # The most reliable way to find the latest tb-postgres image is by sorting
          # by creation date and getting the top one.
          TB_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}\t{{.ID}}" | grep "tb-postgres:" | sort -k 2 | tail -1 | awk '{print $1}')

          if [ -z "$TB_IMAGE" ]; then
            echo "ERROR: tb-postgres image not found!"
            docker images
            exit 1
          fi

          echo "Pushing image $TB_IMAGE â†’ $IMAGE_URI:$VERSION"

          docker tag $TB_IMAGE $IMAGE_URI:$VERSION
          docker push $IMAGE_URI:$VERSION

          docker tag $TB_IMAGE $IMAGE_URI:latest
          docker push $IMAGE_URI:latest

          echo "ECR_IMAGE=$IMAGE_URI:$VERSION" >> $GITHUB_ENV
